rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============================
    // Helper Functions
    // ============================
    function isOwner() {
      return request.auth != null && resource.data.userId == request.auth.uid;
    }

    function isCreatingOwnData() {
      return request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    function isQueryingOwnData() {
      // Note: No .exists() at the end. This is the correct syntax.
      return request.auth != null && request.query.where.userId == request.auth.uid;
    }

    // ============================
    // Collections
    // ============================

    // ACCOUNTS: Manages user accounts for pack ownership
    match /accounts/{accountId} {
      allow get, update, delete: if isOwner();
      allow list: if isQueryingOwnData();
      allow create: if isCreatingOwnData();
    }
    
    // CHARACTERS: Stores user-created character data
    match /characters/{characterId} {
      allow get, update, delete: if isOwner();
      allow list: if isQueryingOwnData();
      allow create: if isCreatingOwnData();

      // Nested subcollection for individual quest completions per character
      match /questCompletions/{completionId} {
         allow read, write: if get(/databases/$(database)/documents/characters/$(characterId)).data.userId == request.auth.uid;
      }
    }
    
    // USERS: Stores user profile information (displayName, roles, etc.)
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // PUBLIC PROFILES: For display name lookups
    match /publicProfiles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // SUGGESTIONS: For user feedback and admin interaction
    match /suggestions/{suggestionId} {
        allow read: if resource.data.suggesterId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        allow create: if request.auth != null && request.resource.data.suggesterId == request.auth.uid;
        allow update: if (request.auth != null && resource.data.suggesterId == request.auth.uid) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isCreator == true;
    }

    // USER CONFIGURATION: Stores account-specific settings like owned packs
    match /userConfiguration/{userId}/{subcollection}/{docId} {
      allow read, write: if request.auth != null && userId == request.auth.uid;
    }
    
    // LOGS: For administrative action tracking
    match /Logs/{logCollection}/{subcollection}/{entryId} {
        allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
