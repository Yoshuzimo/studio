
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // users: Publicly readable for basic info, but only the user can write to their own document.
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn(); // Allow listing for admin features, queries must be secured
      allow write: if isSignedIn() && request.auth.uid == userId;
      // Admins can manage user roles (implemented via server-side flows/functions)
    }

    // publicProfiles: Publicly readable display names and icons. Only user can update their own.
    match /publicProfiles/{userId} {
      allow get;
      allow list; // Allow listing for features like searching for users.
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // characters: Only the owner of the character can interact with it.
    match /characters/{characterId} {
      // A user can get, update, or delete their own character document.
      allow get, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // A user can list characters, but the query *must* be filtered by their userId.
      // The frontend code is responsible for adding `where('userId', '==', request.auth.uid)`.
      allow list: if isSignedIn();
      
      // A user can create a character if the new document's userId matches their own.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // questCompletions: Subcollection for character-specific quest data.
      match /questCompletions/{questId} {
        allow read, write, delete: if isSignedIn() && get(/databases/$(database)/documents/characters/$(characterId)).data.userId == request.auth.uid;
      }
    }

    // accounts: User-specific accounts for managing pack ownership.
    match /accounts/{accountId} {
       // A user can get, update, or delete their own account document.
      allow get, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;

      // A user can list accounts, but the query *must* be filtered by their userId.
      allow list: if isSignedIn();

      // A user can create an account if the new document's userId matches their own.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // userConfiguration: Holds user-specific settings and data like owned packs.
    match /userConfiguration/{userId}/{subcollection}/{docId} {
        // A user can only access their own configuration documents.
        allow read, write, delete: if isSignedIn() && userId == request.auth.uid;
    }

    // suggestions: Users can create them, and only they or an admin can read/update their own.
    // This will be managed by server-side logic (flows) for security.
    match /suggestions/{suggestionId} {
      allow read, write: if isSignedIn(); // Let server-side flows handle fine-grained access control.
      allow create: if isSignedIn();
    }
    
    // Logs: Writable by server-side logic only (implicitly denied to clients).
    match /Logs/{logCollection}/{logId} {
      allow read, write: if false; 
    }
  }
}
