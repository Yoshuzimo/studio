
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================
    // Helper Functions
    // ============================
    function getActingUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isSelf(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && getActingUserDoc().data.isAdmin == true;
    }

    function isOwner() {
      return request.auth != null && getActingUserDoc().data.isOwner == true;
    }

    function isCreator() {
      return request.auth != null && getActingUserDoc().data.isCreator == true;
    }

    function onlyAllowedKeysModified(allowedKeys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedKeys);
    }

    function sensitiveFieldsUnchanged(sensitiveFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(sensitiveFields) == false;
    }

    function fieldsAreUnchanged(fieldKeys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(fieldKeys) == false;
    }

    // ============================
    // Users Collection
    // ============================
    match /users/{document=**} {
      allow list: if false; // ðŸ”’ prevent listing full user docs
    }

    match /users/{userId} {
      allow read: if isSelf(userId) || isCreator();

      allow create: if request.auth != null &&
                     request.auth.uid == userId &&
                     request.resource.data.id == request.auth.uid &&
                     request.resource.data.email == request.auth.token.email &&
                     request.resource.data.keys().hasAll(['id', 'email', 'displayName', 'isAdmin', 'isOwner', 'isCreator', 'createdAt']) &&
                     request.resource.data.isAdmin == false &&
                     request.resource.data.isOwner == false &&
                     request.resource.data.isCreator == false &&
                     request.resource.data.createdAt == request.time;

      // âœ… Self-update for displayName AND iconUrl
      allow update: if isSelf(userId) &&
                    onlyAllowedKeysModified(['displayName', 'iconUrl']) &&
                    sensitiveFieldsUnchanged([
                      'id', 'email', 'isAdmin', 'isOwner', 'isCreator', 'emailVerified', 'createdAt'
                    ]);

      // Role updates
      allow update: if request.auth != null && request.auth.uid != userId &&
        (
          (isCreator() && resource.data.isCreator == false &&
            (
              onlyAllowedKeysModified(['isAdmin', 'isOwner']) ||
              (request.resource.data.isOwner == true && request.resource.data.isAdmin == true && onlyAllowedKeysModified(['isAdmin', 'isOwner']))
            ) &&
            sensitiveFieldsUnchanged(['isCreator', 'emailVerified', 'id', 'createdAt', 'email', 'displayName', 'iconUrl'])
          ) ||
          (isOwner() && resource.data.isCreator == false &&
            (
              (resource.data.isAdmin == true && resource.data.isOwner == false &&
                request.resource.data.isOwner == true && request.resource.data.isAdmin == true &&
                onlyAllowedKeysModified(['isOwner', 'isAdmin'])) ||
              (resource.data.isAdmin == false && resource.data.isOwner == false &&
                request.resource.data.isAdmin == true && request.resource.data.isOwner == false &&
                onlyAllowedKeysModified(['isAdmin']))
            ) &&
            sensitiveFieldsUnchanged(['isCreator', 'emailVerified', 'id', 'createdAt', 'email', 'displayName', 'iconUrl'])
          ) ||
          (isAdmin() && resource.data.isCreator == false && resource.data.isOwner == false && resource.data.isAdmin == false &&
            request.resource.data.isAdmin == true && request.resource.data.isOwner == false &&
            onlyAllowedKeysModified(['isAdmin']) &&
            sensitiveFieldsUnchanged(['isCreator', 'emailVerified', 'id', 'createdAt', 'email', 'displayName', 'iconUrl'])
          )
        );

      // Creator updates emailVerified
      allow update: if isCreator() &&
                    onlyAllowedKeysModified(['emailVerified']) &&
                    sensitiveFieldsUnchanged(['isAdmin', 'isOwner', 'isCreator', 'id', 'createdAt', 'email', 'displayName', 'iconUrl']);

      allow delete: if false;
    }

    // ============================
    // Public Profiles Collection
    // ============================
    match /publicProfiles/{userId} {
      allow read: if request.auth != null;
      allow update: if isSelf(userId) &&
                    onlyAllowedKeysModified(['displayName', 'iconUrl', 'updatedAt']) &&
                    sensitiveFieldsUnchanged(['userId']);
      allow create: if isSelf(userId);
      allow delete: if false;
    }

    // ============================
    // Characters + Quest Completions
    // ============================
    match /characters/{characterId} {
      allow read, update, delete: if request.auth != null &&
                                   resource.data.userId == request.auth.uid;
      allow create: if request.auth != null &&
                    request.resource.data.userId == request.auth.uid;

      // âœ… NEW: Character-specific Quest Completion Tracking
      match /questCompletions/{questCompletionId} {
        allow read, create, update, delete: if request.auth != null &&
          get(/databases/$(database)/documents/characters/$(characterId)).data.userId == request.auth.uid;
      }
    }

    // ============================
    // User Configuration / Owned Packs
    // ============================
    match /userConfiguration/{userId}/ownedPacksInfo/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // ============================
    // Suggestions
    // ============================
    match /suggestions/{suggestionId} {
      allow create: if request.auth != null;
      allow read: if isAdmin() || (request.auth != null && resource.data.suggesterId == request.auth.uid);
      allow update, delete: if isAdmin();
    }

    // ============================
    // Messages
    // ============================
    match /messages/{messageId} {
      allow read: if request.auth != null &&
                  (resource.data.receiverId == request.auth.uid ||
                   resource.data.senderId == request.auth.uid ||
                   isAdmin());
      allow create: if request.auth != null &&
                    request.resource.data.senderId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // ============================
    // Global Quests
    // ============================
    match /quests/{questId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // ============================
    // Global Adventure Packs
    // ============================
    match /adventurePacks/{packId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // ============================
    // Quest/Data Metadata
    // ============================
    match /metadata/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ============================
    // Role Change Logs
    // ============================
    match /Logs/roleChanges/entries/{logId} {
      allow create: if request.auth != null && (isAdmin() || isOwner() || isCreator());
      allow read: if isCreator();
      allow update: if request.auth != null &&
                    (request.auth.uid == resource.data.changerId || isCreator()) &&
                    onlyAllowedKeysModified(['status', 'newRoleApplied', 'timestampFinalized', 'errorDetails']) &&
                    fieldsAreUnchanged([
                      'changerId', 'changerDisplayName', 'changerTier',
                      'targetUserId', 'targetUserDisplayName', 'targetUserOriginalRole',
                      'requestedChange', 'timestampRequested'
                    ]);
      allow delete: if false;
    }
  }
}
