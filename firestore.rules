rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      // Users can read their own user document.
      allow read: if isSignedIn() && request.auth.uid == userId;
      // Users can update their own document, but cannot grant themselves admin/owner/creator roles.
      allow update: if isSignedIn() 
                    && request.auth.uid == userId
                    && !('isAdmin' in request.resource.data && request.resource.data.isAdmin != resource.data.isAdmin)
                    && !('isOwner' in request.resource.data && request.resource.data.isOwner != resource.data.isOwner)
                    && !('isCreator' in request.resource.data && request.resource.data.isCreator != resource.data.isCreator);
      // Allow creation during signup process.
      allow create: if isSignedIn() && request.auth.uid == userId;
    }

    match /publicProfiles/{userId} {
      // Anyone can read public profiles.
      allow read: if true;
      // Only the user can update their own public profile.
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Rules for user-specific data like characters, accounts, and configurations.
    // The client MUST use a `where("userId", "==", request.auth.uid)` clause for list queries.
    match /characters/{characterId} {
      allow get, write, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn(); // Query must include .where('userId', '==', auth.uid)
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Rules for quest completions subcollection
      match /questCompletions/{questId} {
          allow read, write: if isSignedIn() && get(/databases/$(database)/documents/characters/$(characterId)).data.userId == request.auth.uid;
      }
    }

    match /accounts/{accountId} {
      allow get, write, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn(); // Query must include .where('userId', '==', auth.uid)
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // This collection holds user-specific settings.
    match /userConfiguration/{userId}/{subcollection}/{docId} {
       allow read, write, delete: if isSignedIn() && userId == request.auth.uid;
       allow list: if isSignedIn(); // Query must include .where('userId', '==', auth.uid) - though not used for this path structure.
       allow create: if isSignedIn() && userId == request.auth.uid;
    }
    
    match /suggestions/{suggestionId} {
        // Admins can read/write any suggestion.
        // Users can read/write their own suggestions.
        allow read, write: if isSignedIn() && (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true || resource.data.suggesterId == request.auth.uid);
        
        // Users can create suggestions.
        allow create: if isSignedIn() && request.resource.data.suggesterId == request.auth.uid;
    }
    
    // Admin-only collections
    match /quests/{questId} {
      // Only admins can manage the master quest list.
      allow read, write, delete, list: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /adventurePacks/{packId} {
       // Only admins can manage the master adventure pack list.
       allow read, write, delete, list: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /Logs/{logCollectionId}/{entryId} {
        // Only admins can read/write logs
        allow read, write: if isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

  }
}
