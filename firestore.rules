rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =======================
    // Characters Collection
    // =======================
    match /characters/{characterId} {
      // Allow get/update/delete if the user is the owner of the document.
      allow get, update, delete: if isOwner();
      // Allow a user to list characters only if their query is scoped to their own userId.
      allow list: if isQueryingOwnData();
      // Allow a user to create a character if the new document's userId matches their own.
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    // =======================
    // Accounts Collection
    // =======================
    match /accounts/{accountId} {
      // Allow get/update/delete if the user is the owner of the document.
      allow get, update, delete: if isOwner();
      // Allow a user to list accounts only if their query is scoped to their own userId.
      allow list: if isQueryingOwnData();
      // Allow a user to create an account if the new document's userId matches their own.
      // This is the key fix for new user setup.
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    // =======================
    // Suggestions Collection
    // =======================
    match /suggestions/{suggestionId} {
      // Admins can read/write/delete any suggestion.
      allow read, write, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      // Users can create suggestions.
      allow create: if isCreatingOwnData();
       // Users can read/update their own suggestions.
      allow get, update: if isOwner();
    }

    // =======================
    // Public Profiles (Read-Only for clients)
    // =======================
    match /publicProfiles/{userId} {
      allow get: if isAuthenticated();
      // Write access is handled by server-side functions (AuthContext).
      allow write: if false; 
    }

    // =======================
    // User Configuration
    // =======================
    match /userConfiguration/{userId}/{document=**} {
        allow read, write: if request.auth.uid == userId;
    }

    // =======================
    // Users Collection (Private user data)
    // =======================
    match /users/{userId} {
      // A user can only read or write their own user document.
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // =======================
    // Logs Collection (Write-only for clients, read-only for admins)
    // =======================
     match /Logs/{logType}/{logId=**} {
      allow read, list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow write: if isAuthenticated(); // For writing logs like role changes
    }


    // =======================
    // Reusable Helper Functions
    // =======================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner() {
      // Check if the user is authenticated and their UID matches the userId field in the document.
      return isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    function isCreatingOwnData() {
      // Check if the user is authenticated and the new document's userId field matches their UID.
      return isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    function isQueryingOwnData() {
      // Enforce that any 'list' operation (query) MUST include a 'where' clause
      // that filters for the current user's ID. This prevents listing other users' documents.
      return isAuthenticated() && request.query.where.get('userId')[2] == request.auth.uid;
    }
  }
}
