
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =======================
    // Characters Collection
    // =======================
    match /characters/{characterId} {
      allow get: if isOwner(resource.data);
      allow list: if isQueryingOwnData();
      allow create: if isCreatingOwnData(request.resource.data);
      allow update: if isOwner(resource.data);
      allow delete: if isOwner(resource.data);
    }

    match /characters/{characterId}/{subcollection}/{docId} {
       allow read, write: if get(/databases/$(database)/documents/characters/$(characterId)).data.userId == request.auth.uid;
    }
    
    // =======================
    // Accounts Collection
    // =======================
    match /accounts/{accountId} {
      allow read, update, delete: if isOwner(resource.data);
      allow list: if isQueryingOwnData();
      allow create: if isCreatingOwnData(request.resource.data);
    }
    
    // =======================
    // User Configuration
    // =======================
    match /userConfiguration/{userId}/{subcollection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // =======================
    // Suggestions Collection
    // =======================
     match /suggestions/{suggestionId} {
      allow read: if isOwner(resource.data);
      allow create: if isCreatingOwnData(request.resource.data);
      allow update: if isOwner(resource.data);
      // Admin access is handled by server-side functions (flows)
    }

    // =======================
    // Users & Public Profiles
    // =======================
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    match /publicProfiles/{userId} {
      allow read;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // =======================
    // Logs Collection (Admin Write Only)
    // =======================
    match /Logs/{logType}/{logId} {
      allow read, write: if false; // No client access
    }
    match /Logs/{logType}/entries/{entryId} {
       allow read, write: if false; // No client access
    }


    // =======================
    // Reusable Helper Functions
    // =======================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(docData) {
      return isAuthenticated() && docData.userId == request.auth.uid;
    }

    function isCreatingOwnData(docData) {
      return isAuthenticated() && docData.userId == request.auth.uid;
    }

    function isQueryingOwnData() {
      // This rule is tricky and a common source of errors.
      // It ensures that any 'list' (collection query) operation MUST include a `where('userId', '==', request.auth.uid)` clause.
      // This prevents users from listing all documents in a collection.
      return isAuthenticated() && 'userId' in request.query.resource.data;
    }
  }
}
